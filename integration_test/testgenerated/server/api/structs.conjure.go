// This file was generated by Conjure and should not be manually edited.

package api

import (
	"github.com/palantir/conjure-go-runtime/conjure-go-contract/errors"
	"github.com/palantir/pkg/binary"
	"github.com/palantir/pkg/safejson"
	"github.com/palantir/pkg/safeyaml"
	"github.com/tidwall/gjson"
)

type CustomObject struct {
	Data []byte
}

func (o CustomObject) MarshalJSON() ([]byte, error) {
	if o.Data == nil {
		o.Data = make([]byte, 0)
	}
	type CustomObjectAlias CustomObject
	return safejson.Marshal(CustomObjectAlias(o))
}

func (o *CustomObject) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		switch key.Str {
		case "data":
			if value.Type != gjson.String {
				err = errors.NewInvalidArgument()
				return false
			}
			o.Data, err = binary.Binary(value.Str).Bytes()
		}
		return err == nil
	})
	return err
}

func (o CustomObject) MarshalYAML() (interface{}, error) {
	jsonBytes, err := o.MarshalJSON()
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *CustomObject) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return o.UnmarshalJSON(jsonBytes)
}
