// This file was generated by Conjure and should not be manually edited.

package api

import (
	"github.com/palantir/conjure-go-runtime/v2/conjure-go-contract/errors"
	"github.com/palantir/pkg/binary"
	"github.com/palantir/pkg/boolean"
	"github.com/palantir/pkg/safejson"
	"github.com/palantir/pkg/safeyaml"
	"github.com/palantir/pkg/uuid"
	wparams "github.com/palantir/witchcraft-go-params"
	"github.com/tidwall/gjson"
)

type Basic struct {
	Data string `json:"data"`
}

func (o Basic) MarshalJSON() ([]byte, error) {
	type BasicAlias Basic
	return safejson.Marshal(BasicAlias(o))
}

func (o *Basic) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	var seenData bool
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		if value.Type == gjson.Null {
			return true
		}
		switch key.Str {
		case "data":
			seenData = true
			if value.Type != gjson.String {
				err = errors.NewInvalidArgument()
				return false
			}
			o.Data = value.Str
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seenData {
		missingFields = append(missingFields, "data")
	}
	if len(missingFields) > 0 {
		return errors.NewInvalidArgument(wparams.NewSafeParam("missingFields", missingFields))
	}
	return nil
}

func (o Basic) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *Basic) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

type BinaryMap struct {
	Map map[binary.Binary][]byte `json:"map"`
}

func (o BinaryMap) MarshalJSON() ([]byte, error) {
	if o.Map == nil {
		o.Map = make(map[binary.Binary][]byte, 0)
	}
	type BinaryMapAlias BinaryMap
	return safejson.Marshal(BinaryMapAlias(o))
}

func (o *BinaryMap) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	o.Map = make(map[binary.Binary][]byte, 0)
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		if value.Type == gjson.Null {
			return true
		}
		switch key.Str {
		case "map":
			if !value.IsObject() {
				err = errors.NewInvalidArgument()
				return false
			}
			if o.Map == nil {
				o.Map = make(map[binary.Binary][]byte, 0)
			}
			value.ForEach(func(key, value gjson.Result) bool {
				if key.Type != gjson.String {
					err = errors.NewInvalidArgument()
					return false
				}
				if value.Type != gjson.String {
					err = errors.NewInvalidArgument()
					return false
				}
				var mapKey binary.Binary
				mapKey = binary.Binary(key.Str)
				var mapVal []byte
				mapVal, err = binary.Binary(value.Str).Bytes()
				o.Map[mapKey] = mapVal
				return err == nil
			})
		}
		return err == nil
	})
	return err
}

func (o BinaryMap) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *BinaryMap) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

type BooleanIntegerMap struct {
	Map map[boolean.Boolean]int `json:"map"`
}

func (o BooleanIntegerMap) MarshalJSON() ([]byte, error) {
	if o.Map == nil {
		o.Map = make(map[boolean.Boolean]int, 0)
	}
	type BooleanIntegerMapAlias BooleanIntegerMap
	return safejson.Marshal(BooleanIntegerMapAlias(o))
}

func (o *BooleanIntegerMap) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	o.Map = make(map[boolean.Boolean]int, 0)
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		if value.Type == gjson.Null {
			return true
		}
		switch key.Str {
		case "map":
			if !value.IsObject() {
				err = errors.NewInvalidArgument()
				return false
			}
			if o.Map == nil {
				o.Map = make(map[boolean.Boolean]int, 0)
			}
			value.ForEach(func(key, value gjson.Result) bool {
				if key.Type != gjson.False && key.Type != gjson.True {
					err = errors.NewInvalidArgument()
					return false
				}
				if value.Type != gjson.Number {
					err = errors.NewInvalidArgument()
					return false
				}
				var mapKey boolean.Boolean
				mapKey = boolean.Boolean(key.Bool())
				var mapVal int
				mapVal = int(value.Int())
				o.Map[mapKey] = mapVal
				return err == nil
			})
		}
		return err == nil
	})
	return err
}

func (o BooleanIntegerMap) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *BooleanIntegerMap) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

type Collections struct {
	MapVar   map[string][]int   `json:"mapVar"`
	ListVar  []string           `json:"listVar"`
	MultiDim [][]map[string]int `json:"multiDim"`
}

func (o Collections) MarshalJSON() ([]byte, error) {
	if o.MapVar == nil {
		o.MapVar = make(map[string][]int, 0)
	}
	if o.ListVar == nil {
		o.ListVar = make([]string, 0)
	}
	if o.MultiDim == nil {
		o.MultiDim = make([][]map[string]int, 0)
	}
	type CollectionsAlias Collections
	return safejson.Marshal(CollectionsAlias(o))
}

func (o *Collections) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	o.MapVar = make(map[string][]int, 0)
	o.ListVar = make([]string, 0)
	o.MultiDim = make([][]map[string]int, 0)
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		if value.Type == gjson.Null {
			return true
		}
		switch key.Str {
		case "mapVar":
			if !value.IsObject() {
				err = errors.NewInvalidArgument()
				return false
			}
			if o.MapVar == nil {
				o.MapVar = make(map[string][]int, 0)
			}
			value.ForEach(func(key, value gjson.Result) bool {
				if key.Type != gjson.String {
					err = errors.NewInvalidArgument()
					return false
				}
				if !value.IsArray() {
					err = errors.NewInvalidArgument()
					return false
				}
				var mapKey string
				mapKey = key.Str
				var mapVal []int
				value.ForEach(func(_, value gjson.Result) bool {
					if value.Type != gjson.Number {
						err = errors.NewInvalidArgument()
						return false
					}
					var listElement1 int
					listElement1 = int(value.Int())
					mapVal = append(mapVal, listElement1)
					return err == nil
				})
				o.MapVar[mapKey] = mapVal
				return err == nil
			})
		case "listVar":
			if !value.IsArray() {
				err = errors.NewInvalidArgument()
				return false
			}
			value.ForEach(func(_, value gjson.Result) bool {
				if value.Type != gjson.String {
					err = errors.NewInvalidArgument()
					return false
				}
				var listElement string
				listElement = value.Str
				o.ListVar = append(o.ListVar, listElement)
				return err == nil
			})
		case "multiDim":
			if !value.IsArray() {
				err = errors.NewInvalidArgument()
				return false
			}
			value.ForEach(func(_, value gjson.Result) bool {
				if !value.IsArray() {
					err = errors.NewInvalidArgument()
					return false
				}
				var listElement []map[string]int
				value.ForEach(func(_, value gjson.Result) bool {
					if !value.IsObject() {
						err = errors.NewInvalidArgument()
						return false
					}
					var listElement1 map[string]int
					if listElement1 == nil {
						listElement1 = make(map[string]int, 0)
					}
					value.ForEach(func(key, value gjson.Result) bool {
						if key.Type != gjson.String {
							err = errors.NewInvalidArgument()
							return false
						}
						if value.Type != gjson.Number {
							err = errors.NewInvalidArgument()
							return false
						}
						var mapKey2 string
						mapKey2 = key.Str
						var mapVal2 int
						mapVal2 = int(value.Int())
						listElement1[mapKey2] = mapVal2
						return err == nil
					})
					listElement = append(listElement, listElement1)
					return err == nil
				})
				o.MultiDim = append(o.MultiDim, listElement)
				return err == nil
			})
		}
		return err == nil
	})
	return err
}

func (o Collections) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *Collections) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

type Compound struct {
	Obj Collections `json:"obj"`
}

func (o Compound) MarshalJSON() ([]byte, error) {
	type CompoundAlias Compound
	return safejson.Marshal(CompoundAlias(o))
}

func (o *Compound) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	var seenObj bool
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		if value.Type == gjson.Null {
			return true
		}
		switch key.Str {
		case "obj":
			seenObj = true
			err = o.Obj.UnmarshalJSON([]byte(value.Raw))
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seenObj {
		missingFields = append(missingFields, "obj")
	}
	if len(missingFields) > 0 {
		return errors.NewInvalidArgument(wparams.NewSafeParam("missingFields", missingFields))
	}
	return nil
}

func (o Compound) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *Compound) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

type ExampleUuid struct {
	Uid uuid.UUID `json:"uid"`
}

func (o ExampleUuid) MarshalJSON() ([]byte, error) {
	type ExampleUuidAlias ExampleUuid
	return safejson.Marshal(ExampleUuidAlias(o))
}

func (o *ExampleUuid) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	var seenUid bool
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		if value.Type == gjson.Null {
			return true
		}
		switch key.Str {
		case "uid":
			seenUid = true
			if value.Type != gjson.String {
				err = errors.NewInvalidArgument()
				return false
			}
			err = o.Uid.UnmarshalText([]byte(value.Str))
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seenUid {
		missingFields = append(missingFields, "uid")
	}
	if len(missingFields) > 0 {
		return errors.NewInvalidArgument(wparams.NewSafeParam("missingFields", missingFields))
	}
	return nil
}

func (o ExampleUuid) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *ExampleUuid) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

// A type using go keywords
type Type struct {
	Type []string          `json:"type"`
	Chan map[string]string `json:"chan"`
}

func (o Type) MarshalJSON() ([]byte, error) {
	if o.Type == nil {
		o.Type = make([]string, 0)
	}
	if o.Chan == nil {
		o.Chan = make(map[string]string, 0)
	}
	type TypeAlias Type
	return safejson.Marshal(TypeAlias(o))
}

func (o *Type) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	o.Type = make([]string, 0)
	o.Chan = make(map[string]string, 0)
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		if value.Type == gjson.Null {
			return true
		}
		switch key.Str {
		case "type":
			if !value.IsArray() {
				err = errors.NewInvalidArgument()
				return false
			}
			value.ForEach(func(_, value gjson.Result) bool {
				if value.Type != gjson.String {
					err = errors.NewInvalidArgument()
					return false
				}
				var listElement string
				listElement = value.Str
				o.Type = append(o.Type, listElement)
				return err == nil
			})
		case "chan":
			if !value.IsObject() {
				err = errors.NewInvalidArgument()
				return false
			}
			if o.Chan == nil {
				o.Chan = make(map[string]string, 0)
			}
			value.ForEach(func(key, value gjson.Result) bool {
				if key.Type != gjson.String {
					err = errors.NewInvalidArgument()
					return false
				}
				if value.Type != gjson.String {
					err = errors.NewInvalidArgument()
					return false
				}
				var mapKey string
				mapKey = key.Str
				var mapVal string
				mapVal = value.Str
				o.Chan[mapKey] = mapVal
				return err == nil
			})
		}
		return err == nil
	})
	return err
}

func (o Type) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *Type) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}
