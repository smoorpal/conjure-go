// This file was generated by Conjure and should not be manually edited.

package spec

import (
	"github.com/palantir/conjure-go-runtime/v2/conjure-go-contract/errors"
	"github.com/palantir/pkg/safejson"
	"github.com/palantir/pkg/safeyaml"
	wparams "github.com/palantir/witchcraft-go-params"
	"github.com/tidwall/gjson"
)

type AliasDefinition struct {
	TypeName TypeName       `json:"typeName"`
	Alias    Type           `json:"alias"`
	Docs     *Documentation `json:"docs"`
}

func (o AliasDefinition) MarshalJSON() ([]byte, error) {
	type AliasDefinitionAlias AliasDefinition
	return safejson.Marshal(AliasDefinitionAlias(o))
}

func (o *AliasDefinition) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	var seenTypeName bool
	var seenAlias bool
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		if value.Type == gjson.Null {
			return true
		}
		switch key.Str {
		case "typeName":
			seenTypeName = true
			err = o.TypeName.UnmarshalJSON([]byte(value.Raw))
		case "alias":
			seenAlias = true
			err = o.Alias.UnmarshalJSON([]byte(value.Raw))
		case "docs":
			if value.Type != gjson.Null {
				if value.Type != gjson.String {
					err = errors.NewInvalidArgument()
					return false
				}
				var optionalValue Documentation
				optionalValue = Documentation(value.Str)
				o.Docs = &optionalValue
			}
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seenTypeName {
		missingFields = append(missingFields, "typeName")
	}
	if !seenAlias {
		missingFields = append(missingFields, "alias")
	}
	if len(missingFields) > 0 {
		return errors.NewInvalidArgument(wparams.NewSafeParam("missingFields", missingFields))
	}
	return nil
}

func (o AliasDefinition) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *AliasDefinition) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

type ArgumentDefinition struct {
	ArgName   ArgumentName   `json:"argName"`
	Type      Type           `json:"type"`
	ParamType ParameterType  `json:"paramType"`
	Docs      *Documentation `json:"docs"`
	Markers   []Type         `json:"markers"`
	Tags      []string       `json:"tags"`
}

func (o ArgumentDefinition) MarshalJSON() ([]byte, error) {
	if o.Markers == nil {
		o.Markers = make([]Type, 0)
	}
	if o.Tags == nil {
		o.Tags = make([]string, 0)
	}
	type ArgumentDefinitionAlias ArgumentDefinition
	return safejson.Marshal(ArgumentDefinitionAlias(o))
}

func (o *ArgumentDefinition) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	var seenArgName bool
	var seenType bool
	var seenParamType bool
	o.Markers = make([]Type, 0)
	o.Tags = make([]string, 0)
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		if value.Type == gjson.Null {
			return true
		}
		switch key.Str {
		case "argName":
			seenArgName = true
			if value.Type != gjson.String {
				err = errors.NewInvalidArgument()
				return false
			}
			o.ArgName = ArgumentName(value.Str)
		case "type":
			seenType = true
			err = o.Type.UnmarshalJSON([]byte(value.Raw))
		case "paramType":
			seenParamType = true
			err = o.ParamType.UnmarshalJSON([]byte(value.Raw))
		case "docs":
			if value.Type != gjson.Null {
				if value.Type != gjson.String {
					err = errors.NewInvalidArgument()
					return false
				}
				var optionalValue Documentation
				optionalValue = Documentation(value.Str)
				o.Docs = &optionalValue
			}
		case "markers":
			if !value.IsArray() {
				err = errors.NewInvalidArgument()
				return false
			}
			value.ForEach(func(_, value gjson.Result) bool {
				var listElement Type
				err = listElement.UnmarshalJSON([]byte(value.Raw))
				o.Markers = append(o.Markers, listElement)
				return err == nil
			})
		case "tags":
			if !value.IsArray() {
				err = errors.NewInvalidArgument()
				return false
			}
			value.ForEach(func(_, value gjson.Result) bool {
				if value.Type != gjson.String {
					err = errors.NewInvalidArgument()
					return false
				}
				var listElement string
				listElement = value.Str
				o.Tags = append(o.Tags, listElement)
				return err == nil
			})
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seenArgName {
		missingFields = append(missingFields, "argName")
	}
	if !seenType {
		missingFields = append(missingFields, "type")
	}
	if !seenParamType {
		missingFields = append(missingFields, "paramType")
	}
	if len(missingFields) > 0 {
		return errors.NewInvalidArgument(wparams.NewSafeParam("missingFields", missingFields))
	}
	return nil
}

func (o ArgumentDefinition) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *ArgumentDefinition) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

type BodyParameterType struct {
}

type ConjureDefinition struct {
	Version    int                    `json:"version"`
	Errors     []ErrorDefinition      `json:"errors"`
	Types      []TypeDefinition       `json:"types"`
	Services   []ServiceDefinition    `json:"services"`
	Extensions map[string]interface{} `json:"extensions"`
}

func (o ConjureDefinition) MarshalJSON() ([]byte, error) {
	if o.Errors == nil {
		o.Errors = make([]ErrorDefinition, 0)
	}
	if o.Types == nil {
		o.Types = make([]TypeDefinition, 0)
	}
	if o.Services == nil {
		o.Services = make([]ServiceDefinition, 0)
	}
	if o.Extensions == nil {
		o.Extensions = make(map[string]interface{}, 0)
	}
	type ConjureDefinitionAlias ConjureDefinition
	return safejson.Marshal(ConjureDefinitionAlias(o))
}

func (o *ConjureDefinition) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	var seenVersion bool
	o.Errors = make([]ErrorDefinition, 0)
	o.Types = make([]TypeDefinition, 0)
	o.Services = make([]ServiceDefinition, 0)
	o.Extensions = make(map[string]interface{}, 0)
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		if value.Type == gjson.Null {
			return true
		}
		switch key.Str {
		case "version":
			seenVersion = true
			if value.Type != gjson.Number {
				err = errors.NewInvalidArgument()
				return false
			}
			o.Version = int(value.Int())
		case "errors":
			if !value.IsArray() {
				err = errors.NewInvalidArgument()
				return false
			}
			value.ForEach(func(_, value gjson.Result) bool {
				var listElement ErrorDefinition
				err = listElement.UnmarshalJSON([]byte(value.Raw))
				o.Errors = append(o.Errors, listElement)
				return err == nil
			})
		case "types":
			if !value.IsArray() {
				err = errors.NewInvalidArgument()
				return false
			}
			value.ForEach(func(_, value gjson.Result) bool {
				var listElement TypeDefinition
				err = listElement.UnmarshalJSON([]byte(value.Raw))
				o.Types = append(o.Types, listElement)
				return err == nil
			})
		case "services":
			if !value.IsArray() {
				err = errors.NewInvalidArgument()
				return false
			}
			value.ForEach(func(_, value gjson.Result) bool {
				var listElement ServiceDefinition
				err = listElement.UnmarshalJSON([]byte(value.Raw))
				o.Services = append(o.Services, listElement)
				return err == nil
			})
		case "extensions":
			if !value.IsObject() {
				err = errors.NewInvalidArgument()
				return false
			}
			if o.Extensions == nil {
				o.Extensions = make(map[string]interface{}, 0)
			}
			value.ForEach(func(key, value gjson.Result) bool {
				if key.Type != gjson.String {
					err = errors.NewInvalidArgument()
					return false
				}
				if value.Type != gjson.JSON && value.Type != gjson.String && value.Type != gjson.Number && value.Type != gjson.True && value.Type != gjson.False {
					err = errors.NewInvalidArgument()
					return false
				}
				var mapKey string
				mapKey = key.Str
				var mapVal interface{}
				mapVal = value.Value()
				o.Extensions[mapKey] = mapVal
				return err == nil
			})
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seenVersion {
		missingFields = append(missingFields, "version")
	}
	if len(missingFields) > 0 {
		return errors.NewInvalidArgument(wparams.NewSafeParam("missingFields", missingFields))
	}
	return nil
}

func (o ConjureDefinition) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *ConjureDefinition) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

type CookieAuthType struct {
	CookieName string `json:"cookieName"`
}

func (o CookieAuthType) MarshalJSON() ([]byte, error) {
	type CookieAuthTypeAlias CookieAuthType
	return safejson.Marshal(CookieAuthTypeAlias(o))
}

func (o *CookieAuthType) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	var seenCookieName bool
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		if value.Type == gjson.Null {
			return true
		}
		switch key.Str {
		case "cookieName":
			seenCookieName = true
			if value.Type != gjson.String {
				err = errors.NewInvalidArgument()
				return false
			}
			o.CookieName = value.Str
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seenCookieName {
		missingFields = append(missingFields, "cookieName")
	}
	if len(missingFields) > 0 {
		return errors.NewInvalidArgument(wparams.NewSafeParam("missingFields", missingFields))
	}
	return nil
}

func (o CookieAuthType) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *CookieAuthType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

type EndpointDefinition struct {
	EndpointName EndpointName         `json:"endpointName"`
	HttpMethod   HttpMethod           `json:"httpMethod"`
	HttpPath     HttpPath             `json:"httpPath"`
	Auth         *AuthType            `json:"auth"`
	Args         []ArgumentDefinition `json:"args"`
	Returns      *Type                `json:"returns"`
	Docs         *Documentation       `json:"docs"`
	Deprecated   *Documentation       `json:"deprecated"`
	Markers      []Type               `json:"markers"`
	Tags         []string             `json:"tags"`
}

func (o EndpointDefinition) MarshalJSON() ([]byte, error) {
	if o.Args == nil {
		o.Args = make([]ArgumentDefinition, 0)
	}
	if o.Markers == nil {
		o.Markers = make([]Type, 0)
	}
	if o.Tags == nil {
		o.Tags = make([]string, 0)
	}
	type EndpointDefinitionAlias EndpointDefinition
	return safejson.Marshal(EndpointDefinitionAlias(o))
}

func (o *EndpointDefinition) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	var seenEndpointName bool
	var seenHttpMethod bool
	var seenHttpPath bool
	o.Args = make([]ArgumentDefinition, 0)
	o.Markers = make([]Type, 0)
	o.Tags = make([]string, 0)
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		if value.Type == gjson.Null {
			return true
		}
		switch key.Str {
		case "endpointName":
			seenEndpointName = true
			if value.Type != gjson.String {
				err = errors.NewInvalidArgument()
				return false
			}
			o.EndpointName = EndpointName(value.Str)
		case "httpMethod":
			seenHttpMethod = true
			if value.Type != gjson.String {
				err = errors.NewInvalidArgument()
				return false
			}
			err = o.HttpMethod.UnmarshalText([]byte(value.Str))
		case "httpPath":
			seenHttpPath = true
			if value.Type != gjson.String {
				err = errors.NewInvalidArgument()
				return false
			}
			o.HttpPath = HttpPath(value.Str)
		case "auth":
			if value.Type != gjson.Null {
				var optionalValue AuthType
				err = optionalValue.UnmarshalJSON([]byte(value.Raw))
				o.Auth = &optionalValue
			}
		case "args":
			if !value.IsArray() {
				err = errors.NewInvalidArgument()
				return false
			}
			value.ForEach(func(_, value gjson.Result) bool {
				var listElement ArgumentDefinition
				err = listElement.UnmarshalJSON([]byte(value.Raw))
				o.Args = append(o.Args, listElement)
				return err == nil
			})
		case "returns":
			if value.Type != gjson.Null {
				var optionalValue Type
				err = optionalValue.UnmarshalJSON([]byte(value.Raw))
				o.Returns = &optionalValue
			}
		case "docs":
			if value.Type != gjson.Null {
				if value.Type != gjson.String {
					err = errors.NewInvalidArgument()
					return false
				}
				var optionalValue Documentation
				optionalValue = Documentation(value.Str)
				o.Docs = &optionalValue
			}
		case "deprecated":
			if value.Type != gjson.Null {
				if value.Type != gjson.String {
					err = errors.NewInvalidArgument()
					return false
				}
				var optionalValue Documentation
				optionalValue = Documentation(value.Str)
				o.Deprecated = &optionalValue
			}
		case "markers":
			if !value.IsArray() {
				err = errors.NewInvalidArgument()
				return false
			}
			value.ForEach(func(_, value gjson.Result) bool {
				var listElement Type
				err = listElement.UnmarshalJSON([]byte(value.Raw))
				o.Markers = append(o.Markers, listElement)
				return err == nil
			})
		case "tags":
			if !value.IsArray() {
				err = errors.NewInvalidArgument()
				return false
			}
			value.ForEach(func(_, value gjson.Result) bool {
				if value.Type != gjson.String {
					err = errors.NewInvalidArgument()
					return false
				}
				var listElement string
				listElement = value.Str
				o.Tags = append(o.Tags, listElement)
				return err == nil
			})
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seenEndpointName {
		missingFields = append(missingFields, "endpointName")
	}
	if !seenHttpMethod {
		missingFields = append(missingFields, "httpMethod")
	}
	if !seenHttpPath {
		missingFields = append(missingFields, "httpPath")
	}
	if len(missingFields) > 0 {
		return errors.NewInvalidArgument(wparams.NewSafeParam("missingFields", missingFields))
	}
	return nil
}

func (o EndpointDefinition) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *EndpointDefinition) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

type EnumDefinition struct {
	TypeName TypeName              `json:"typeName"`
	Values   []EnumValueDefinition `json:"values"`
	Docs     *Documentation        `json:"docs"`
}

func (o EnumDefinition) MarshalJSON() ([]byte, error) {
	if o.Values == nil {
		o.Values = make([]EnumValueDefinition, 0)
	}
	type EnumDefinitionAlias EnumDefinition
	return safejson.Marshal(EnumDefinitionAlias(o))
}

func (o *EnumDefinition) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	var seenTypeName bool
	o.Values = make([]EnumValueDefinition, 0)
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		if value.Type == gjson.Null {
			return true
		}
		switch key.Str {
		case "typeName":
			seenTypeName = true
			err = o.TypeName.UnmarshalJSON([]byte(value.Raw))
		case "values":
			if !value.IsArray() {
				err = errors.NewInvalidArgument()
				return false
			}
			value.ForEach(func(_, value gjson.Result) bool {
				var listElement EnumValueDefinition
				err = listElement.UnmarshalJSON([]byte(value.Raw))
				o.Values = append(o.Values, listElement)
				return err == nil
			})
		case "docs":
			if value.Type != gjson.Null {
				if value.Type != gjson.String {
					err = errors.NewInvalidArgument()
					return false
				}
				var optionalValue Documentation
				optionalValue = Documentation(value.Str)
				o.Docs = &optionalValue
			}
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seenTypeName {
		missingFields = append(missingFields, "typeName")
	}
	if len(missingFields) > 0 {
		return errors.NewInvalidArgument(wparams.NewSafeParam("missingFields", missingFields))
	}
	return nil
}

func (o EnumDefinition) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *EnumDefinition) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

type EnumValueDefinition struct {
	Value      string         `json:"value"`
	Docs       *Documentation `json:"docs"`
	Deprecated *Documentation `json:"deprecated"`
}

func (o EnumValueDefinition) MarshalJSON() ([]byte, error) {
	type EnumValueDefinitionAlias EnumValueDefinition
	return safejson.Marshal(EnumValueDefinitionAlias(o))
}

func (o *EnumValueDefinition) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	var seenValue bool
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		if value.Type == gjson.Null {
			return true
		}
		switch key.Str {
		case "value":
			seenValue = true
			if value.Type != gjson.String {
				err = errors.NewInvalidArgument()
				return false
			}
			o.Value = value.Str
		case "docs":
			if value.Type != gjson.Null {
				if value.Type != gjson.String {
					err = errors.NewInvalidArgument()
					return false
				}
				var optionalValue Documentation
				optionalValue = Documentation(value.Str)
				o.Docs = &optionalValue
			}
		case "deprecated":
			if value.Type != gjson.Null {
				if value.Type != gjson.String {
					err = errors.NewInvalidArgument()
					return false
				}
				var optionalValue Documentation
				optionalValue = Documentation(value.Str)
				o.Deprecated = &optionalValue
			}
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seenValue {
		missingFields = append(missingFields, "value")
	}
	if len(missingFields) > 0 {
		return errors.NewInvalidArgument(wparams.NewSafeParam("missingFields", missingFields))
	}
	return nil
}

func (o EnumValueDefinition) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *EnumValueDefinition) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

type ErrorDefinition struct {
	ErrorName  TypeName          `json:"errorName"`
	Docs       *Documentation    `json:"docs"`
	Namespace  ErrorNamespace    `json:"namespace"`
	Code       ErrorCode         `json:"code"`
	SafeArgs   []FieldDefinition `json:"safeArgs"`
	UnsafeArgs []FieldDefinition `json:"unsafeArgs"`
}

func (o ErrorDefinition) MarshalJSON() ([]byte, error) {
	if o.SafeArgs == nil {
		o.SafeArgs = make([]FieldDefinition, 0)
	}
	if o.UnsafeArgs == nil {
		o.UnsafeArgs = make([]FieldDefinition, 0)
	}
	type ErrorDefinitionAlias ErrorDefinition
	return safejson.Marshal(ErrorDefinitionAlias(o))
}

func (o *ErrorDefinition) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	var seenErrorName bool
	var seenNamespace bool
	var seenCode bool
	o.SafeArgs = make([]FieldDefinition, 0)
	o.UnsafeArgs = make([]FieldDefinition, 0)
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		if value.Type == gjson.Null {
			return true
		}
		switch key.Str {
		case "errorName":
			seenErrorName = true
			err = o.ErrorName.UnmarshalJSON([]byte(value.Raw))
		case "docs":
			if value.Type != gjson.Null {
				if value.Type != gjson.String {
					err = errors.NewInvalidArgument()
					return false
				}
				var optionalValue Documentation
				optionalValue = Documentation(value.Str)
				o.Docs = &optionalValue
			}
		case "namespace":
			seenNamespace = true
			if value.Type != gjson.String {
				err = errors.NewInvalidArgument()
				return false
			}
			o.Namespace = ErrorNamespace(value.Str)
		case "code":
			seenCode = true
			if value.Type != gjson.String {
				err = errors.NewInvalidArgument()
				return false
			}
			err = o.Code.UnmarshalText([]byte(value.Str))
		case "safeArgs":
			if !value.IsArray() {
				err = errors.NewInvalidArgument()
				return false
			}
			value.ForEach(func(_, value gjson.Result) bool {
				var listElement FieldDefinition
				err = listElement.UnmarshalJSON([]byte(value.Raw))
				o.SafeArgs = append(o.SafeArgs, listElement)
				return err == nil
			})
		case "unsafeArgs":
			if !value.IsArray() {
				err = errors.NewInvalidArgument()
				return false
			}
			value.ForEach(func(_, value gjson.Result) bool {
				var listElement FieldDefinition
				err = listElement.UnmarshalJSON([]byte(value.Raw))
				o.UnsafeArgs = append(o.UnsafeArgs, listElement)
				return err == nil
			})
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seenErrorName {
		missingFields = append(missingFields, "errorName")
	}
	if !seenNamespace {
		missingFields = append(missingFields, "namespace")
	}
	if !seenCode {
		missingFields = append(missingFields, "code")
	}
	if len(missingFields) > 0 {
		return errors.NewInvalidArgument(wparams.NewSafeParam("missingFields", missingFields))
	}
	return nil
}

func (o ErrorDefinition) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *ErrorDefinition) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

type ExternalReference struct {
	// An identifier for a non-Conjure type which is already defined in a different language (e.g. Java).
	ExternalReference TypeName `json:"externalReference"`
	// Other language generators may use the provided fallback if the non-Conjure type is not available. The ANY PrimitiveType is permissible for all external types, but a more specific definition is preferable.
	Fallback Type `json:"fallback"`
}

func (o ExternalReference) MarshalJSON() ([]byte, error) {
	type ExternalReferenceAlias ExternalReference
	return safejson.Marshal(ExternalReferenceAlias(o))
}

func (o *ExternalReference) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	var seenExternalReference bool
	var seenFallback bool
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		if value.Type == gjson.Null {
			return true
		}
		switch key.Str {
		case "externalReference":
			seenExternalReference = true
			err = o.ExternalReference.UnmarshalJSON([]byte(value.Raw))
		case "fallback":
			seenFallback = true
			err = o.Fallback.UnmarshalJSON([]byte(value.Raw))
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seenExternalReference {
		missingFields = append(missingFields, "externalReference")
	}
	if !seenFallback {
		missingFields = append(missingFields, "fallback")
	}
	if len(missingFields) > 0 {
		return errors.NewInvalidArgument(wparams.NewSafeParam("missingFields", missingFields))
	}
	return nil
}

func (o ExternalReference) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *ExternalReference) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

type FieldDefinition struct {
	FieldName  FieldName      `json:"fieldName"`
	Type       Type           `json:"type"`
	Docs       *Documentation `json:"docs"`
	Deprecated *Documentation `json:"deprecated"`
}

func (o FieldDefinition) MarshalJSON() ([]byte, error) {
	type FieldDefinitionAlias FieldDefinition
	return safejson.Marshal(FieldDefinitionAlias(o))
}

func (o *FieldDefinition) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	var seenFieldName bool
	var seenType bool
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		if value.Type == gjson.Null {
			return true
		}
		switch key.Str {
		case "fieldName":
			seenFieldName = true
			if value.Type != gjson.String {
				err = errors.NewInvalidArgument()
				return false
			}
			o.FieldName = FieldName(value.Str)
		case "type":
			seenType = true
			err = o.Type.UnmarshalJSON([]byte(value.Raw))
		case "docs":
			if value.Type != gjson.Null {
				if value.Type != gjson.String {
					err = errors.NewInvalidArgument()
					return false
				}
				var optionalValue Documentation
				optionalValue = Documentation(value.Str)
				o.Docs = &optionalValue
			}
		case "deprecated":
			if value.Type != gjson.Null {
				if value.Type != gjson.String {
					err = errors.NewInvalidArgument()
					return false
				}
				var optionalValue Documentation
				optionalValue = Documentation(value.Str)
				o.Deprecated = &optionalValue
			}
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seenFieldName {
		missingFields = append(missingFields, "fieldName")
	}
	if !seenType {
		missingFields = append(missingFields, "type")
	}
	if len(missingFields) > 0 {
		return errors.NewInvalidArgument(wparams.NewSafeParam("missingFields", missingFields))
	}
	return nil
}

func (o FieldDefinition) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *FieldDefinition) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

type HeaderAuthType struct {
}

type HeaderParameterType struct {
	ParamId ParameterId `json:"paramId"`
}

func (o HeaderParameterType) MarshalJSON() ([]byte, error) {
	type HeaderParameterTypeAlias HeaderParameterType
	return safejson.Marshal(HeaderParameterTypeAlias(o))
}

func (o *HeaderParameterType) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	var seenParamId bool
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		if value.Type == gjson.Null {
			return true
		}
		switch key.Str {
		case "paramId":
			seenParamId = true
			if value.Type != gjson.String {
				err = errors.NewInvalidArgument()
				return false
			}
			o.ParamId = ParameterId(value.Str)
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seenParamId {
		missingFields = append(missingFields, "paramId")
	}
	if len(missingFields) > 0 {
		return errors.NewInvalidArgument(wparams.NewSafeParam("missingFields", missingFields))
	}
	return nil
}

func (o HeaderParameterType) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *HeaderParameterType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

type ListType struct {
	ItemType Type `json:"itemType"`
}

func (o ListType) MarshalJSON() ([]byte, error) {
	type ListTypeAlias ListType
	return safejson.Marshal(ListTypeAlias(o))
}

func (o *ListType) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	var seenItemType bool
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		if value.Type == gjson.Null {
			return true
		}
		switch key.Str {
		case "itemType":
			seenItemType = true
			err = o.ItemType.UnmarshalJSON([]byte(value.Raw))
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seenItemType {
		missingFields = append(missingFields, "itemType")
	}
	if len(missingFields) > 0 {
		return errors.NewInvalidArgument(wparams.NewSafeParam("missingFields", missingFields))
	}
	return nil
}

func (o ListType) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *ListType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

type MapType struct {
	KeyType   Type `json:"keyType"`
	ValueType Type `json:"valueType"`
}

func (o MapType) MarshalJSON() ([]byte, error) {
	type MapTypeAlias MapType
	return safejson.Marshal(MapTypeAlias(o))
}

func (o *MapType) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	var seenKeyType bool
	var seenValueType bool
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		if value.Type == gjson.Null {
			return true
		}
		switch key.Str {
		case "keyType":
			seenKeyType = true
			err = o.KeyType.UnmarshalJSON([]byte(value.Raw))
		case "valueType":
			seenValueType = true
			err = o.ValueType.UnmarshalJSON([]byte(value.Raw))
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seenKeyType {
		missingFields = append(missingFields, "keyType")
	}
	if !seenValueType {
		missingFields = append(missingFields, "valueType")
	}
	if len(missingFields) > 0 {
		return errors.NewInvalidArgument(wparams.NewSafeParam("missingFields", missingFields))
	}
	return nil
}

func (o MapType) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *MapType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

type ObjectDefinition struct {
	TypeName TypeName          `json:"typeName"`
	Fields   []FieldDefinition `json:"fields"`
	Docs     *Documentation    `json:"docs"`
}

func (o ObjectDefinition) MarshalJSON() ([]byte, error) {
	if o.Fields == nil {
		o.Fields = make([]FieldDefinition, 0)
	}
	type ObjectDefinitionAlias ObjectDefinition
	return safejson.Marshal(ObjectDefinitionAlias(o))
}

func (o *ObjectDefinition) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	var seenTypeName bool
	o.Fields = make([]FieldDefinition, 0)
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		if value.Type == gjson.Null {
			return true
		}
		switch key.Str {
		case "typeName":
			seenTypeName = true
			err = o.TypeName.UnmarshalJSON([]byte(value.Raw))
		case "fields":
			if !value.IsArray() {
				err = errors.NewInvalidArgument()
				return false
			}
			value.ForEach(func(_, value gjson.Result) bool {
				var listElement FieldDefinition
				err = listElement.UnmarshalJSON([]byte(value.Raw))
				o.Fields = append(o.Fields, listElement)
				return err == nil
			})
		case "docs":
			if value.Type != gjson.Null {
				if value.Type != gjson.String {
					err = errors.NewInvalidArgument()
					return false
				}
				var optionalValue Documentation
				optionalValue = Documentation(value.Str)
				o.Docs = &optionalValue
			}
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seenTypeName {
		missingFields = append(missingFields, "typeName")
	}
	if len(missingFields) > 0 {
		return errors.NewInvalidArgument(wparams.NewSafeParam("missingFields", missingFields))
	}
	return nil
}

func (o ObjectDefinition) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *ObjectDefinition) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

type OptionalType struct {
	ItemType Type `json:"itemType"`
}

func (o OptionalType) MarshalJSON() ([]byte, error) {
	type OptionalTypeAlias OptionalType
	return safejson.Marshal(OptionalTypeAlias(o))
}

func (o *OptionalType) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	var seenItemType bool
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		if value.Type == gjson.Null {
			return true
		}
		switch key.Str {
		case "itemType":
			seenItemType = true
			err = o.ItemType.UnmarshalJSON([]byte(value.Raw))
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seenItemType {
		missingFields = append(missingFields, "itemType")
	}
	if len(missingFields) > 0 {
		return errors.NewInvalidArgument(wparams.NewSafeParam("missingFields", missingFields))
	}
	return nil
}

func (o OptionalType) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *OptionalType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

type PathParameterType struct {
}

type QueryParameterType struct {
	ParamId ParameterId `json:"paramId"`
}

func (o QueryParameterType) MarshalJSON() ([]byte, error) {
	type QueryParameterTypeAlias QueryParameterType
	return safejson.Marshal(QueryParameterTypeAlias(o))
}

func (o *QueryParameterType) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	var seenParamId bool
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		if value.Type == gjson.Null {
			return true
		}
		switch key.Str {
		case "paramId":
			seenParamId = true
			if value.Type != gjson.String {
				err = errors.NewInvalidArgument()
				return false
			}
			o.ParamId = ParameterId(value.Str)
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seenParamId {
		missingFields = append(missingFields, "paramId")
	}
	if len(missingFields) > 0 {
		return errors.NewInvalidArgument(wparams.NewSafeParam("missingFields", missingFields))
	}
	return nil
}

func (o QueryParameterType) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *QueryParameterType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

type ServiceDefinition struct {
	ServiceName TypeName             `json:"serviceName"`
	Endpoints   []EndpointDefinition `json:"endpoints"`
	Docs        *Documentation       `json:"docs"`
}

func (o ServiceDefinition) MarshalJSON() ([]byte, error) {
	if o.Endpoints == nil {
		o.Endpoints = make([]EndpointDefinition, 0)
	}
	type ServiceDefinitionAlias ServiceDefinition
	return safejson.Marshal(ServiceDefinitionAlias(o))
}

func (o *ServiceDefinition) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	var seenServiceName bool
	o.Endpoints = make([]EndpointDefinition, 0)
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		if value.Type == gjson.Null {
			return true
		}
		switch key.Str {
		case "serviceName":
			seenServiceName = true
			err = o.ServiceName.UnmarshalJSON([]byte(value.Raw))
		case "endpoints":
			if !value.IsArray() {
				err = errors.NewInvalidArgument()
				return false
			}
			value.ForEach(func(_, value gjson.Result) bool {
				var listElement EndpointDefinition
				err = listElement.UnmarshalJSON([]byte(value.Raw))
				o.Endpoints = append(o.Endpoints, listElement)
				return err == nil
			})
		case "docs":
			if value.Type != gjson.Null {
				if value.Type != gjson.String {
					err = errors.NewInvalidArgument()
					return false
				}
				var optionalValue Documentation
				optionalValue = Documentation(value.Str)
				o.Docs = &optionalValue
			}
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seenServiceName {
		missingFields = append(missingFields, "serviceName")
	}
	if len(missingFields) > 0 {
		return errors.NewInvalidArgument(wparams.NewSafeParam("missingFields", missingFields))
	}
	return nil
}

func (o ServiceDefinition) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *ServiceDefinition) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

type SetType struct {
	ItemType Type `json:"itemType"`
}

func (o SetType) MarshalJSON() ([]byte, error) {
	type SetTypeAlias SetType
	return safejson.Marshal(SetTypeAlias(o))
}

func (o *SetType) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	var seenItemType bool
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		if value.Type == gjson.Null {
			return true
		}
		switch key.Str {
		case "itemType":
			seenItemType = true
			err = o.ItemType.UnmarshalJSON([]byte(value.Raw))
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seenItemType {
		missingFields = append(missingFields, "itemType")
	}
	if len(missingFields) > 0 {
		return errors.NewInvalidArgument(wparams.NewSafeParam("missingFields", missingFields))
	}
	return nil
}

func (o SetType) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *SetType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

type TypeName struct {
	// The name of the custom Conjure type or service. It must be in UpperCamelCase. Numbers are permitted, but not at the beginning of a word. Allowed names: "FooBar", "XYCoordinate", "Build2Request". Disallowed names: "fooBar", "2BuildRequest".
	Name string `json:"name"`
	// A period-delimited string of package names. The package names must be lowercase. Numbers are permitted, but not at the beginning of a package name. Allowed packages: "foo", "com.palantir.bar", "com.palantir.foo.thing2". Disallowed packages: "Foo", "com.palantir.foo.2thing".
	Package string `json:"package"`
}

func (o TypeName) MarshalJSON() ([]byte, error) {
	type TypeNameAlias TypeName
	return safejson.Marshal(TypeNameAlias(o))
}

func (o *TypeName) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	var seenName bool
	var seenPackage bool
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		if value.Type == gjson.Null {
			return true
		}
		switch key.Str {
		case "name":
			seenName = true
			if value.Type != gjson.String {
				err = errors.NewInvalidArgument()
				return false
			}
			o.Name = value.Str
		case "package":
			seenPackage = true
			if value.Type != gjson.String {
				err = errors.NewInvalidArgument()
				return false
			}
			o.Package = value.Str
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seenName {
		missingFields = append(missingFields, "name")
	}
	if !seenPackage {
		missingFields = append(missingFields, "package")
	}
	if len(missingFields) > 0 {
		return errors.NewInvalidArgument(wparams.NewSafeParam("missingFields", missingFields))
	}
	return nil
}

func (o TypeName) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *TypeName) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

type UnionDefinition struct {
	TypeName TypeName          `json:"typeName"`
	Union    []FieldDefinition `json:"union"`
	Docs     *Documentation    `json:"docs"`
}

func (o UnionDefinition) MarshalJSON() ([]byte, error) {
	if o.Union == nil {
		o.Union = make([]FieldDefinition, 0)
	}
	type UnionDefinitionAlias UnionDefinition
	return safejson.Marshal(UnionDefinitionAlias(o))
}

func (o *UnionDefinition) UnmarshalJSON(data []byte) error {
	if !gjson.ValidBytes(data) {
		return errors.NewInvalidArgument()
	}
	value := gjson.ParseBytes(data)
	if !value.IsObject() {
		return errors.NewInvalidArgument()
	}
	var seenTypeName bool
	o.Union = make([]FieldDefinition, 0)
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		if value.Type == gjson.Null {
			return true
		}
		switch key.Str {
		case "typeName":
			seenTypeName = true
			err = o.TypeName.UnmarshalJSON([]byte(value.Raw))
		case "union":
			if !value.IsArray() {
				err = errors.NewInvalidArgument()
				return false
			}
			value.ForEach(func(_, value gjson.Result) bool {
				var listElement FieldDefinition
				err = listElement.UnmarshalJSON([]byte(value.Raw))
				o.Union = append(o.Union, listElement)
				return err == nil
			})
		case "docs":
			if value.Type != gjson.Null {
				if value.Type != gjson.String {
					err = errors.NewInvalidArgument()
					return false
				}
				var optionalValue Documentation
				optionalValue = Documentation(value.Str)
				o.Docs = &optionalValue
			}
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seenTypeName {
		missingFields = append(missingFields, "typeName")
	}
	if len(missingFields) > 0 {
		return errors.NewInvalidArgument(wparams.NewSafeParam("missingFields", missingFields))
	}
	return nil
}

func (o UnionDefinition) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *UnionDefinition) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}
